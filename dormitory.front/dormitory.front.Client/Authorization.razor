@page "/auth"
@rendermode RenderMode.InteractiveWebAssembly

@using Newtonsoft.Json;
@using System.Net.Http.Headers
@using dormitory.front.Client.model

@inject IJSRuntime jsRuntime;
@inject HttpClient httpClient;
@inject ICookie cookie;
@inject NavigationManager Navigation;
@inject IAuth auth;
@inject IAccount account;
<EditForm id="auth-form" Model="authData" OnSubmit="@Submit" FormName="auth-form">
    <div class="app-icon auth-icon"></div>
    <h1>Авторизация</h1>
    <section class="input-group">
        <InputText placeholder="Логин"  @bind-Value="authData.username" style="border-bottom: 2px solid var(--gray)" />
        <InputText placeholder="Пароль" type="password" @bind-Value="authData.password" />
    </section>
    <button type="submit" id="submit" class="submit-button">Войти</button>
    <a href="/signup" class="submit-button">Создать аккаунт</a>
    <footer>
        <div class="app-icon"></div>
        <a>Техническая поддержка </a>
        <span>&copy; 2024 - Crazy developers</span>
    </footer>
</EditForm>

<style>
    #auth-form {
        width: 400px;
        margin: 0 auto;
        padding: 50px 0;
        position: relative;
        height: 100%;
        
    }

    input {
        all: unset;
        font-size: 18px;
        padding: 0.4em;
    }


</style>

@code {

    AuthData authData = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        bool success = await auth.Authorize();
        account.Current = account.Current;
        if (success)
        {
            Navigation.NavigateTo("/dashboard");
        }
        else
        {
            Console.WriteLine("Auth error");
        }
    }

    async Task Submit()
    {
        Console.WriteLine("Submit started");
        var response = await httpClient.PostAsJsonAsync("http://localhost:6981/login", authData);

        var jsonResponse = await response.Content.ReadAsStringAsync();

        AuthorizationModel? model = JsonConvert.DeserializeObject<AuthorizationModel>(jsonResponse);

        await WriteTokenAsync(model);

        Navigation.NavigateTo("/dashboard");
    }

    async Task WriteTokenAsync(AuthorizationModel? model)
    {
        await cookie.SetValueAsync("access_token", model.access_token, days:10);
        await cookie.SetValueAsync("refresh_token", model.refresh_token, days:10);
    }
}
